// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package restaking

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey = ag_solanago.MustPublicKeyFromBase58("frag9zfFME5u1SNhUYGa4cXLzMKgZXF3xwZ2Y1KCYTQ")

func SetProgramID(PublicKey ag_solanago.PublicKey) {
	ProgramID = PublicKey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "Restaking"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_AdminInitializeExtraAccountMetaList = ag_binary.TypeID([8]byte{43, 34, 13, 49, 167, 88, 235, 235})

	Instruction_AdminInitializeFundAccount = ag_binary.TypeID([8]byte{83, 184, 197, 143, 118, 192, 56, 15})

	Instruction_AdminInitializeNormalizedTokenPoolAccount = ag_binary.TypeID([8]byte{36, 90, 87, 197, 124, 174, 14, 225})

	Instruction_AdminInitializeRewardAccount = ag_binary.TypeID([8]byte{208, 48, 70, 171, 86, 38, 29, 149})

	Instruction_AdminUpdateExtraAccountMetaListIfNeeded = ag_binary.TypeID([8]byte{113, 124, 72, 210, 237, 164, 96, 241})

	Instruction_AdminUpdateFundAccountIfNeeded = ag_binary.TypeID([8]byte{53, 204, 67, 56, 198, 113, 243, 34})

	Instruction_AdminUpdateNormalizedTokenPoolAccountIfNeeded = ag_binary.TypeID([8]byte{117, 212, 78, 133, 31, 164, 123, 241})

	Instruction_AdminUpdateRewardAccountIfNeeded = ag_binary.TypeID([8]byte{113, 211, 75, 86, 235, 248, 240, 2})

	Instruction_FundManagerAddNormalizedTokenPoolSupportedToken = ag_binary.TypeID([8]byte{173, 135, 121, 96, 30, 138, 56, 27})

	Instruction_FundManagerAddReward = ag_binary.TypeID([8]byte{26, 6, 104, 77, 57, 237, 13, 5})

	Instruction_FundManagerAddRewardPool = ag_binary.TypeID([8]byte{222, 241, 120, 225, 5, 76, 175, 136})

	Instruction_FundManagerAddRewardPoolHolder = ag_binary.TypeID([8]byte{79, 160, 90, 79, 137, 135, 197, 134})

	Instruction_FundManagerAddSupportedToken = ag_binary.TypeID([8]byte{0, 137, 153, 52, 179, 163, 4, 20})

	Instruction_FundManagerClearUserSolWithdrawalRequests = ag_binary.TypeID([8]byte{229, 235, 96, 236, 74, 245, 85, 243})

	Instruction_FundManagerCloseFundAccount = ag_binary.TypeID([8]byte{158, 192, 72, 180, 218, 61, 228, 156})

	Instruction_FundManagerCloseRewardPool = ag_binary.TypeID([8]byte{159, 24, 238, 47, 253, 39, 6, 30})

	Instruction_FundManagerInitializeFundJitoRestakingVault = ag_binary.TypeID([8]byte{94, 33, 145, 222, 177, 170, 211, 74})

	Instruction_FundManagerInitializeFundNormalizedToken = ag_binary.TypeID([8]byte{210, 163, 184, 165, 127, 40, 122, 23})

	Instruction_FundManagerSettleReward = ag_binary.TypeID([8]byte{105, 92, 118, 15, 173, 135, 98, 86})

	Instruction_FundManagerUpdateFundStrategy = ag_binary.TypeID([8]byte{66, 200, 217, 64, 201, 228, 239, 193})

	Instruction_FundManagerUpdateRestakingVaultDelegationStrategy = ag_binary.TypeID([8]byte{54, 180, 250, 68, 121, 2, 143, 87})

	Instruction_FundManagerUpdateRestakingVaultStrategy = ag_binary.TypeID([8]byte{131, 35, 217, 161, 90, 24, 63, 133})

	Instruction_FundManagerUpdateSolStrategy = ag_binary.TypeID([8]byte{107, 157, 24, 119, 5, 88, 154, 147})

	Instruction_FundManagerUpdateSupportedTokenStrategy = ag_binary.TypeID([8]byte{131, 168, 49, 206, 73, 18, 137, 219})

	Instruction_OperatorDonateSolToFund = ag_binary.TypeID([8]byte{88, 167, 224, 32, 221, 203, 157, 69})

	Instruction_OperatorDonateSupportedTokenToFund = ag_binary.TypeID([8]byte{116, 216, 13, 162, 86, 164, 43, 93})

	Instruction_OperatorLogMessage = ag_binary.TypeID([8]byte{104, 51, 132, 76, 54, 74, 57, 199})

	Instruction_OperatorRunFundCommand = ag_binary.TypeID([8]byte{73, 116, 27, 23, 118, 153, 196, 14})

	Instruction_OperatorUpdateFundPrices = ag_binary.TypeID([8]byte{253, 219, 211, 59, 254, 151, 126, 161})

	Instruction_OperatorUpdateNormalizedTokenPoolPrices = ag_binary.TypeID([8]byte{59, 127, 178, 59, 73, 213, 181, 204})

	Instruction_OperatorUpdateRewardPools = ag_binary.TypeID([8]byte{50, 3, 240, 113, 3, 164, 2, 41})

	Instruction_SlasherInitializeNormalizedTokenWithdrawalAccount = ag_binary.TypeID([8]byte{180, 112, 136, 49, 174, 179, 50, 47})

	Instruction_SlasherWithdrawNormalizedToken = ag_binary.TypeID([8]byte{30, 86, 7, 231, 47, 59, 162, 214})

	Instruction_UserCancelWithdrawalRequest = ag_binary.TypeID([8]byte{187, 80, 45, 65, 239, 189, 78, 102})

	Instruction_UserClaimRewards = ag_binary.TypeID([8]byte{8, 211, 145, 71, 169, 22, 80, 33})

	Instruction_UserDepositSol = ag_binary.TypeID([8]byte{9, 201, 63, 79, 105, 75, 147, 47})

	Instruction_UserDepositSupportedToken = ag_binary.TypeID([8]byte{139, 84, 137, 218, 229, 151, 183, 154})

	Instruction_UserInitializeFundAccount = ag_binary.TypeID([8]byte{237, 214, 91, 254, 184, 57, 37, 102})

	Instruction_UserInitializeRewardAccount = ag_binary.TypeID([8]byte{35, 77, 53, 232, 36, 237, 146, 246})

	Instruction_UserRequestWithdrawal = ag_binary.TypeID([8]byte{147, 199, 177, 14, 195, 86, 62, 134})

	Instruction_UserUpdateFundAccountIfNeeded = ag_binary.TypeID([8]byte{22, 10, 103, 174, 223, 166, 182, 76})

	Instruction_UserUpdateRewardAccountIfNeeded = ag_binary.TypeID([8]byte{156, 78, 23, 8, 238, 177, 204, 173})

	Instruction_UserUpdateRewardPools = ag_binary.TypeID([8]byte{89, 143, 243, 236, 73, 81, 158, 100})

	Instruction_UserWithdrawSol = ag_binary.TypeID([8]byte{214, 13, 137, 164, 194, 105, 183, 252})

	Instruction_UserWithdrawSupportedToken = ag_binary.TypeID([8]byte{95, 90, 176, 21, 252, 231, 133, 99})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_AdminInitializeExtraAccountMetaList:
		return "AdminInitializeExtraAccountMetaList"
	case Instruction_AdminInitializeFundAccount:
		return "AdminInitializeFundAccount"
	case Instruction_AdminInitializeNormalizedTokenPoolAccount:
		return "AdminInitializeNormalizedTokenPoolAccount"
	case Instruction_AdminInitializeRewardAccount:
		return "AdminInitializeRewardAccount"
	case Instruction_AdminUpdateExtraAccountMetaListIfNeeded:
		return "AdminUpdateExtraAccountMetaListIfNeeded"
	case Instruction_AdminUpdateFundAccountIfNeeded:
		return "AdminUpdateFundAccountIfNeeded"
	case Instruction_AdminUpdateNormalizedTokenPoolAccountIfNeeded:
		return "AdminUpdateNormalizedTokenPoolAccountIfNeeded"
	case Instruction_AdminUpdateRewardAccountIfNeeded:
		return "AdminUpdateRewardAccountIfNeeded"
	case Instruction_FundManagerAddNormalizedTokenPoolSupportedToken:
		return "FundManagerAddNormalizedTokenPoolSupportedToken"
	case Instruction_FundManagerAddReward:
		return "FundManagerAddReward"
	case Instruction_FundManagerAddRewardPool:
		return "FundManagerAddRewardPool"
	case Instruction_FundManagerAddRewardPoolHolder:
		return "FundManagerAddRewardPoolHolder"
	case Instruction_FundManagerAddSupportedToken:
		return "FundManagerAddSupportedToken"
	case Instruction_FundManagerClearUserSolWithdrawalRequests:
		return "FundManagerClearUserSolWithdrawalRequests"
	case Instruction_FundManagerCloseFundAccount:
		return "FundManagerCloseFundAccount"
	case Instruction_FundManagerCloseRewardPool:
		return "FundManagerCloseRewardPool"
	case Instruction_FundManagerInitializeFundJitoRestakingVault:
		return "FundManagerInitializeFundJitoRestakingVault"
	case Instruction_FundManagerInitializeFundNormalizedToken:
		return "FundManagerInitializeFundNormalizedToken"
	case Instruction_FundManagerSettleReward:
		return "FundManagerSettleReward"
	case Instruction_FundManagerUpdateFundStrategy:
		return "FundManagerUpdateFundStrategy"
	case Instruction_FundManagerUpdateRestakingVaultDelegationStrategy:
		return "FundManagerUpdateRestakingVaultDelegationStrategy"
	case Instruction_FundManagerUpdateRestakingVaultStrategy:
		return "FundManagerUpdateRestakingVaultStrategy"
	case Instruction_FundManagerUpdateSolStrategy:
		return "FundManagerUpdateSolStrategy"
	case Instruction_FundManagerUpdateSupportedTokenStrategy:
		return "FundManagerUpdateSupportedTokenStrategy"
	case Instruction_OperatorDonateSolToFund:
		return "OperatorDonateSolToFund"
	case Instruction_OperatorDonateSupportedTokenToFund:
		return "OperatorDonateSupportedTokenToFund"
	case Instruction_OperatorLogMessage:
		return "OperatorLogMessage"
	case Instruction_OperatorRunFundCommand:
		return "OperatorRunFundCommand"
	case Instruction_OperatorUpdateFundPrices:
		return "OperatorUpdateFundPrices"
	case Instruction_OperatorUpdateNormalizedTokenPoolPrices:
		return "OperatorUpdateNormalizedTokenPoolPrices"
	case Instruction_OperatorUpdateRewardPools:
		return "OperatorUpdateRewardPools"
	case Instruction_SlasherInitializeNormalizedTokenWithdrawalAccount:
		return "SlasherInitializeNormalizedTokenWithdrawalAccount"
	case Instruction_SlasherWithdrawNormalizedToken:
		return "SlasherWithdrawNormalizedToken"
	case Instruction_UserCancelWithdrawalRequest:
		return "UserCancelWithdrawalRequest"
	case Instruction_UserClaimRewards:
		return "UserClaimRewards"
	case Instruction_UserDepositSol:
		return "UserDepositSol"
	case Instruction_UserDepositSupportedToken:
		return "UserDepositSupportedToken"
	case Instruction_UserInitializeFundAccount:
		return "UserInitializeFundAccount"
	case Instruction_UserInitializeRewardAccount:
		return "UserInitializeRewardAccount"
	case Instruction_UserRequestWithdrawal:
		return "UserRequestWithdrawal"
	case Instruction_UserUpdateFundAccountIfNeeded:
		return "UserUpdateFundAccountIfNeeded"
	case Instruction_UserUpdateRewardAccountIfNeeded:
		return "UserUpdateRewardAccountIfNeeded"
	case Instruction_UserUpdateRewardPools:
		return "UserUpdateRewardPools"
	case Instruction_UserWithdrawSol:
		return "UserWithdrawSol"
	case Instruction_UserWithdrawSupportedToken:
		return "UserWithdrawSupportedToken"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			Name: "admin_initialize_extra_account_meta_list", Type: (*AdminInitializeExtraAccountMetaList)(nil),
		},
		{
			Name: "admin_initialize_fund_account", Type: (*AdminInitializeFundAccount)(nil),
		},
		{
			Name: "admin_initialize_normalized_token_pool_account", Type: (*AdminInitializeNormalizedTokenPoolAccount)(nil),
		},
		{
			Name: "admin_initialize_reward_account", Type: (*AdminInitializeRewardAccount)(nil),
		},
		{
			Name: "admin_update_extra_account_meta_list_if_needed", Type: (*AdminUpdateExtraAccountMetaListIfNeeded)(nil),
		},
		{
			Name: "admin_update_fund_account_if_needed", Type: (*AdminUpdateFundAccountIfNeeded)(nil),
		},
		{
			Name: "admin_update_normalized_token_pool_account_if_needed", Type: (*AdminUpdateNormalizedTokenPoolAccountIfNeeded)(nil),
		},
		{
			Name: "admin_update_reward_account_if_needed", Type: (*AdminUpdateRewardAccountIfNeeded)(nil),
		},
		{
			Name: "fund_manager_add_normalized_token_pool_supported_token", Type: (*FundManagerAddNormalizedTokenPoolSupportedToken)(nil),
		},
		{
			Name: "fund_manager_add_reward", Type: (*FundManagerAddReward)(nil),
		},
		{
			Name: "fund_manager_add_reward_pool", Type: (*FundManagerAddRewardPool)(nil),
		},
		{
			Name: "fund_manager_add_reward_pool_holder", Type: (*FundManagerAddRewardPoolHolder)(nil),
		},
		{
			Name: "fund_manager_add_supported_token", Type: (*FundManagerAddSupportedToken)(nil),
		},
		{
			Name: "fund_manager_clear_user_sol_withdrawal_requests", Type: (*FundManagerClearUserSolWithdrawalRequests)(nil),
		},
		{
			Name: "fund_manager_close_fund_account", Type: (*FundManagerCloseFundAccount)(nil),
		},
		{
			Name: "fund_manager_close_reward_pool", Type: (*FundManagerCloseRewardPool)(nil),
		},
		{
			Name: "fund_manager_initialize_fund_jito_restaking_vault", Type: (*FundManagerInitializeFundJitoRestakingVault)(nil),
		},
		{
			Name: "fund_manager_initialize_fund_normalized_token", Type: (*FundManagerInitializeFundNormalizedToken)(nil),
		},
		{
			Name: "fund_manager_settle_reward", Type: (*FundManagerSettleReward)(nil),
		},
		{
			Name: "fund_manager_update_fund_strategy", Type: (*FundManagerUpdateFundStrategy)(nil),
		},
		{
			Name: "fund_manager_update_restaking_vault_delegation_strategy", Type: (*FundManagerUpdateRestakingVaultDelegationStrategy)(nil),
		},
		{
			Name: "fund_manager_update_restaking_vault_strategy", Type: (*FundManagerUpdateRestakingVaultStrategy)(nil),
		},
		{
			Name: "fund_manager_update_sol_strategy", Type: (*FundManagerUpdateSolStrategy)(nil),
		},
		{
			Name: "fund_manager_update_supported_token_strategy", Type: (*FundManagerUpdateSupportedTokenStrategy)(nil),
		},
		{
			Name: "operator_donate_sol_to_fund", Type: (*OperatorDonateSolToFund)(nil),
		},
		{
			Name: "operator_donate_supported_token_to_fund", Type: (*OperatorDonateSupportedTokenToFund)(nil),
		},
		{
			Name: "operator_log_message", Type: (*OperatorLogMessage)(nil),
		},
		{
			Name: "operator_run_fund_command", Type: (*OperatorRunFundCommand)(nil),
		},
		{
			Name: "operator_update_fund_prices", Type: (*OperatorUpdateFundPrices)(nil),
		},
		{
			Name: "operator_update_normalized_token_pool_prices", Type: (*OperatorUpdateNormalizedTokenPoolPrices)(nil),
		},
		{
			Name: "operator_update_reward_pools", Type: (*OperatorUpdateRewardPools)(nil),
		},
		{
			Name: "slasher_initialize_normalized_token_withdrawal_account", Type: (*SlasherInitializeNormalizedTokenWithdrawalAccount)(nil),
		},
		{
			Name: "slasher_withdraw_normalized_token", Type: (*SlasherWithdrawNormalizedToken)(nil),
		},
		{
			Name: "user_cancel_withdrawal_request", Type: (*UserCancelWithdrawalRequest)(nil),
		},
		{
			Name: "user_claim_rewards", Type: (*UserClaimRewards)(nil),
		},
		{
			Name: "user_deposit_sol", Type: (*UserDepositSol)(nil),
		},
		{
			Name: "user_deposit_supported_token", Type: (*UserDepositSupportedToken)(nil),
		},
		{
			Name: "user_initialize_fund_account", Type: (*UserInitializeFundAccount)(nil),
		},
		{
			Name: "user_initialize_reward_account", Type: (*UserInitializeRewardAccount)(nil),
		},
		{
			Name: "user_request_withdrawal", Type: (*UserRequestWithdrawal)(nil),
		},
		{
			Name: "user_update_fund_account_if_needed", Type: (*UserUpdateFundAccountIfNeeded)(nil),
		},
		{
			Name: "user_update_reward_account_if_needed", Type: (*UserUpdateRewardAccountIfNeeded)(nil),
		},
		{
			Name: "user_update_reward_pools", Type: (*UserUpdateRewardPools)(nil),
		},
		{
			Name: "user_withdraw_sol", Type: (*UserWithdrawSol)(nil),
		},
		{
			Name: "user_withdraw_supported_token", Type: (*UserWithdrawSupportedToken)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := decodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func decodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}

func DecodeInstructions(message *ag_solanago.Message) (instructions []*Instruction, err error) {
	for _, ins := range message.Instructions {
		var programID ag_solanago.PublicKey
		if programID, err = message.Program(ins.ProgramIDIndex); err != nil {
			return
		}
		if !programID.Equals(ProgramID) {
			continue
		}
		var accounts []*ag_solanago.AccountMeta
		if accounts, err = ins.ResolveInstructionAccounts(message); err != nil {
			return
		}
		var insDecoded *Instruction
		if insDecoded, err = decodeInstruction(accounts, ins.Data); err != nil {
			return
		}
		instructions = append(instructions, insDecoded)
	}
	return
}
